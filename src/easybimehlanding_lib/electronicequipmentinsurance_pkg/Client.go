/*
 * easybimehlanding_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package electronicequipmentinsurance_pkg


import(
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"easybimehlanding_lib/apihelper_pkg"
	"easybimehlanding_lib/configuration_pkg"
	"easybimehlanding_lib/models_pkg"
)
/*
 * Client structure as interface implementation
 */
type ELECTRONICEQUIPMENTINSURANCE_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * دریافت اطلاعات اولیه استعلام بیمه نامه ی تجهیزات الکترونیک
 * @param    string        subDomain     parameter: Required
 * @param    string        xApiKey       parameter: Required
 * @return	Returns the *models_pkg.BaseModelElectronicEquipmentInsurance response from the API call
 */
func (me *ELECTRONICEQUIPMENTINSURANCE_IMPL) GetElectronicEquipmentInsurance (
            subDomain string,
            xApiKey string) (*models_pkg.BaseModelElectronicEquipmentInsurance, error) {
    //the endpoint path uri
    _pathUrl := "/ElectronicEquipmentInsurance/Initialize"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.SERVER_1,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "subDomain" : subDomain,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "x-api-key" : apihelper_pkg.ToString(xApiKey, ""),
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BaseModelElectronicEquipmentInsurance = &models_pkg.BaseModelElectronicEquipmentInsurance{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * دریافت لیست نوع برند دستگاه
 * @param    int64         deviceGroup      parameter: Required
 * @param    int64         deviceTypeId     parameter: Required
 * @param    string        xApiKey          parameter: Required
 * @return	Returns the *models_pkg.BaseModelDeviceBrandTypes response from the API call
 */
func (me *ELECTRONICEQUIPMENTINSURANCE_IMPL) GetDeviceBrandTypes (
            deviceGroup int64,
            deviceTypeId int64,
            xApiKey string) (*models_pkg.BaseModelDeviceBrandTypes, error) {
    //the endpoint path uri
    _pathUrl := "/ComboData/DeviceBrandTypes"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.SERVER_1,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "deviceGroup" : deviceGroup,
        "deviceTypeId" : deviceTypeId,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "x-api-key" : apihelper_pkg.ToString(xApiKey, ""),
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BaseModelDeviceBrandTypes = &models_pkg.BaseModelDeviceBrandTypes{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * دریافت لیست فرانشیر استعلام بیمه نامه ی تجهیزات الکترونیک
 * @param    int64         deviceModelId     parameter: Required
 * @param    string        xApiKey           parameter: Required
 * @return	Returns the *models_pkg.BaseModelDiviceFranchisee response from the API call
 */
func (me *ELECTRONICEQUIPMENTINSURANCE_IMPL) GetDiviceFranchisee (
            deviceModelId int64,
            xApiKey string) (*models_pkg.BaseModelDiviceFranchisee, error) {
    //the endpoint path uri
    _pathUrl := "/ElectronicEquipmentInsurance/DiviceFranchisee"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.SERVER_1,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "deviceModelId" : deviceModelId,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "x-api-key" : apihelper_pkg.ToString(xApiKey, ""),
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BaseModelDiviceFranchisee = &models_pkg.BaseModelDiviceFranchisee{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

