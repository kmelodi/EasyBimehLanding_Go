/*
 * easybimehlanding_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package trackingdamage_pkg


import(
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"easybimehlanding_lib/apihelper_pkg"
	"easybimehlanding_lib/configuration_pkg"
	"easybimehlanding_lib/models_pkg"
)
/*
 * Client structure as interface implementation
 */
type TRACKINGDAMAGE_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * استعلام وضعیت خسارت
 * @param    string        mTrackingCode       parameter: Required
 * @param    string        xApiKey             parameter: Required
 * @return	Returns the *models_pkg.BaseModelTrakingCode response from the API call
 */
func (me *TRACKINGDAMAGE_IMPL) GetTrackingCode (
            mTrackingCode string,
            xApiKey string) (*models_pkg.BaseModelTrakingCode, error) {
    //the endpoint path uri
    _pathUrl := "/TrackingDamage/TrackingCode/"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.SERVER_1,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "/{TrackingCode}" : mTrackingCode,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "x-api-key" : apihelper_pkg.ToString(xApiKey, ""),
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Bad Request", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BaseModelTrakingCode = &models_pkg.BaseModelTrakingCode{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * ثبت خسارت بیمه
 * @param    *models_pkg.TrackingDamageRequest        body             parameter: Required
 * @param    string                                   xApiKey          parameter: Required
 * @param    string                                   contentType      parameter: Required
 * @return	Returns the *models_pkg.TrackingDamage response from the API call
 */
func (me *TRACKINGDAMAGE_IMPL) CreateTrackingDamage (
            body *models_pkg.TrackingDamageRequest,
            xApiKey string,
            contentType string) (*models_pkg.TrackingDamage, error) {
    //the endpoint path uri
    _pathUrl := "/TrackingDamage"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.SERVER_1,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "x-api-key" : apihelper_pkg.ToString(xApiKey, ""),
        "Content-Type" : apihelper_pkg.ToString(contentType, ""),
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.TrackingDamage = &models_pkg.TrackingDamage{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * دریافت لیست وضعیت های خسارت
 * @param    int64         statusType     parameter: Required
 * @param    string        xApiKey        parameter: Required
 * @return	Returns the *models_pkg.BaseModelStatusStatusCollections response from the API call
 */
func (me *TRACKINGDAMAGE_IMPL) GetStatusStatusCollections (
            statusType int64,
            xApiKey string) (*models_pkg.BaseModelStatusStatusCollections, error) {
    //the endpoint path uri
    _pathUrl := "/Status/StatusCollections"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.SERVER_1,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "statusType" : statusType,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "x-api-key" : apihelper_pkg.ToString(xApiKey, ""),
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BaseModelStatusStatusCollections = &models_pkg.BaseModelStatusStatusCollections{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * دریافت اطلاعات وضعیت
 * @param    int64         entityId      parameter: Required
 * @param    string        xApiKey       parameter: Required
 * @return	Returns the *models_pkg.BaseModelStatus response from the API call
 */
func (me *TRACKINGDAMAGE_IMPL) GetStatus (
            entityId int64,
            xApiKey string) (*models_pkg.BaseModelStatus, error) {
    //the endpoint path uri
    _pathUrl := "/Status"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.SERVER_1,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "entityId" : entityId,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "x-api-key" : apihelper_pkg.ToString(xApiKey, ""),
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BaseModelStatus = &models_pkg.BaseModelStatus{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

